---
# Redis
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  labels:
    app: redis
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels: 
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      volumes:
        - name: data
          emptyDir: {}
        - name: config
          configMap:
            name: redis-config
            items:
            - key: redis-config
              path: redis.conf
      containers:
        - name: redis
          image: redis
          command:
            - redis-server
            - "/redis-master/redis.conf"
          env:
          - name: MASTER
            value: "true"
          ports:
          - containerPort: 6379
          volumeMounts:
            - mountPath: /redis-master-data
              name: data
            - mountPath: /redis-master
              name: config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
  name: redis
spec:
  ports:
    - port: 6379
      protocol: TCP
      targetPort: 6379
  selector:
    app: redis
  clusterIP: None
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
data:
  redis-config: |
    bind 0.0.0.0
---
# edumeet server
apiVersion: v1
kind: ConfigMap
metadata:
  name: edumeet-server
data:
  config.js: |
   // const os = require('os');
   // const fs = require('fs');
   // const tunnel = require('tunnel');

    const userRoles = require('../lib/access/roles');

    const {
        BYPASS_ROOM_LOCK,
        BYPASS_LOBBY
    } = require('../lib/access/access');

    const {
        CHANGE_ROOM_LOCK,
        PROMOTE_PEER,
        MODIFY_ROLE,
        SEND_CHAT,
        MODERATE_CHAT,
        SHARE_AUDIO,
        SHARE_VIDEO,
        SHARE_SCREEN,
        EXTRA_VIDEO,
        SHARE_FILE,
        MODERATE_FILES,
        MODERATE_ROOM,
        LOCAL_RECORD_ROOM
    } = require('../lib/access/perms');

    // const AwaitQueue = require('awaitqueue');
    // const axios = require('axios');

    module.exports =
    {
        // Auth conf
        /*
        auth :
        {
            // Always enabled if configured
            lti :
            {
                consumerKey    : 'key',
                consumerSecret : 'secret'
            },

            // Auth strategy to use (default oidc)
            strategy : 'oidc',
            oidc :
            {
                // The issuer URL for OpenID Connect discovery
                // The OpenID Provider Configuration Document
                // could be discovered on:
                // issuerURL + '/.well-known/openid-configuration'

                // e.g. google OIDC config
                // Follow this guide to get credential:  
                // https://developers.google.com/identity/protocols/oauth2/openid-connect
                // use this issuerURL
                // issuerURL     : 'https://accounts.google.com/',
                
                issuerURL     : 'https://example.com',
                clientOptions :
                {
                    client_id     : '',
                    client_secret : '',
                    scope       		: 'openid email profile',
                    // where client.example.com is your edumeet server
                    redirect_uri  : 'https://client.example.com/auth/callback'
                },
                /*
                HttpOptions   :
                {
                    timeout: 5000,
                    agent: 
                    {
                        https:tunnel.httpsOverHttp({
                               proxy: {
                                    host: 'proxy',
                                   port: 3128
                               }
                        })
                    }
                }
                *//*
            },
            saml :
            {
                // where edumeet.gcp-europe-central2.stunner.cc is your edumeet server
                callbackUrl    : 'https://edumeet.gcp-europe-central2.stunner.cc/auth/callback',
                issuer         : 'https://edumeet.gcp-europe-central2.stunner.cc',
                entryPoint     : 'https://openidp.feide.no/simplesaml/saml2/idp/SSOService.php',
                privateCert    : fs.readFileSync('config/saml_privkey.pem', 'utf-8'),
                signingCert    : fs.readFileSync('config/saml_cert.pem', 'utf-8'),
                decryptionPvk  : fs.readFileSync('config/saml_privkey.pem', 'utf-8'),
                decryptionCert : fs.readFileSync('config/saml_cert.pem', 'utf-8'),
                // Federation cert
                cert           : fs.readFileSync('config/federation_cert.pem', 'utf-8')
            },

            // to create password hash use: node server/utils/password_encode.js cleartextpassword
            local :
            {
                users : [
                    {
                        id           : 1,
                        username     : 'alice',
                        passwordHash : '$2b$10$PAXXw.6cL3zJLd7ZX.AnL.sFg2nxjQPDmMmGSOQYIJSa0TrZ9azG6',
                        displayName  : 'Alice',
                        emails       : [ { value: 'alice@atlanta.com' } ],
                        meetRoles   : [ ]
                    },
                    {
                        id           : 2,
                        username     : 'bob',
                        passwordHash : '$2b$10$BzAkXcZ54JxhHTqCQcFn8.H6klY/G48t4jDBeTE2d2lZJk/.tvv0G',
                        displayName  : 'Bob',
                        emails       : [ { value: 'bob@biloxi.com' } ],
                        meetRoles   : [ ]
                    }
                ]
            }
        },
        */
        // This logger class will have the log function
        // called every time there is a room created or destroyed,
        // or peer created or destroyed. This would then be able
        // to log to a file or external service.
        /* StatusLogger          : class
        {
            constructor()
            {
                this._queue = new AwaitQueue();
            }

            // rooms: rooms object
            // peers: peers object
            // eslint-disable-next-line no-unused-vars
            async log({ rooms, peers })
            {
                this._queue.push(async () =>
                {
                    // Do your logging in here, use queue to keep correct order

                    // eslint-disable-next-line no-console
                    console.log('Number of rooms: ', rooms.size);
                    // eslint-disable-next-line no-console
                    console.log('Number of peers: ', peers.size);
                })
                    .catch((error) =>
                    {
                        // eslint-disable-next-line no-console
                        console.log('error in log', error);
                    });
            }
        }, */
        // This function will be called on successful login through oidc.
        // Use this function to map your oidc userinfo to the Peer object.
        // The roomId is equal to the room name.
        // See examples below.
        // Examples:
        /*
        // All authenticated users will be MODERATOR and AUTHENTICATED
        userMapping : async ({ peer, room, roomId, userinfo }) =>
        {
            peer.addRole(userRoles.MODERATOR);
            peer.addRole(userRoles.AUTHENTICATED);
        },
        // All authenticated users will be AUTHENTICATED,
        // and those with the moderator role set in the userinfo
        // will also be MODERATOR
        userMapping : async ({ peer, room, roomId, userinfo }) =>
        {
            if (
                Array.isArray(userinfo.meetRoles) &&
                userinfo.meetRoles.includes('moderator')
            )
            {
                peer.addRole(userRoles.MODERATOR);
            }

            if (
                Array.isArray(userinfo.meetRoles) &&
                userinfo.meetRoles.includes('meetingadmin')
            )
            {
                peer.addRole(userRoles.ADMIN);
            }

            peer.addRole(userRoles.AUTHENTICATED);
        },
        // First authenticated user will be moderator,
        // all others will be AUTHENTICATED
        userMapping : async ({ peer, room, roomId, userinfo }) =>
        {
            if (room)
            {
                const peers = room.getJoinedPeers();

                if (peers.some((_peer) => _peer.authenticated))
                    peer.addRole(userRoles.AUTHENTICATED);
                else
                {
                    peer.addRole(userRoles.MODERATOR);
                    peer.addRole(userRoles.AUTHENTICATED);
                }
            }
        },
        // All authenticated users will be AUTHENTICATED,
        // and those with email ending with @example.com
        // will also be MODERATOR
        userMapping : async ({ peer, room, roomId, userinfo }) =>
        {
            if (userinfo.email && userinfo.email.endsWith('@example.com'))
            {
                peer.addRole(userRoles.MODERATOR);
            }

            peer.addRole(userRoles.AUTHENTICATED);
        },
        */
        // eslint-disable-next-line no-unused-vars
        userMapping : async ({ peer, room, roomId, userinfo }) =>
        {
            if (userinfo.picture != null)
            {
                if (!userinfo.picture.match(/^http/g))
                {
                    peer.picture = `data:image/jpeg;base64, ${userinfo.picture}`;
                }
                else
                {
                    peer.picture = userinfo.picture;
                }
            }
            if (userinfo['urn:oid:0.9.2342.19200300.100.1.60'] != null)
            {
                peer.picture = `data:image/jpeg;base64, ${userinfo['urn:oid:0.9.2342.19200300.100.1.60']}`;
            }

            if (userinfo.nickname != null)
            {
                peer.displayName = userinfo.nickname;
            }

            if (userinfo.name != null)
            {
                peer.displayName = userinfo.name;
            }

            if (userinfo.displayName != null)
            {
                peer.displayName = userinfo.displayName;
            }

            if (userinfo['urn:oid:2.16.840.1.113730.3.1.241'] != null)
            {
                peer.displayName = userinfo['urn:oid:2.16.840.1.113730.3.1.241'];
            }

            if (userinfo.email != null)
            {
                peer.email = userinfo.email;
            }
        },
        // All users have the role "NORMAL" by default. Other roles need to be
        // added in the "userMapping" function. The following accesses and
        // permissions are arrays of roles. Roles can be changed in userRoles.js
        //
        // Example:
        // [ userRoles.MODERATOR, userRoles.AUTHENTICATED ]
        accessFromRoles : {
            // The role(s) will gain access to the room
            // even if it is locked (!)
            [BYPASS_ROOM_LOCK] : [ userRoles.ADMIN ],
            // The role(s) will gain access to the room without
            // going into the lobby. If you want to restrict access to your
            // server to only directly allow authenticated users, you could
            // add the userRoles.AUTHENTICATED to the user in the userMapping
            // function, and change to BYPASS_LOBBY : [ userRoles.AUTHENTICATED ]
            [BYPASS_LOBBY]     : [ userRoles.NORMAL ]
        },
        permissionsFromRoles : {
            // The role(s) have permission to lock/unlock a room
            [CHANGE_ROOM_LOCK]  : [ userRoles.MODERATOR ],
            // The role(s) have permission to promote a peer from the lobby
            [PROMOTE_PEER]      : [ userRoles.NORMAL ],
            // The role(s) have permission to give/remove other peers roles
            [MODIFY_ROLE]       : [ userRoles.NORMAL ],
            // The role(s) have permission to send chat messages
            [SEND_CHAT]         : [ userRoles.NORMAL ],
            // The role(s) have permission to moderate chat
            [MODERATE_CHAT]     : [ userRoles.MODERATOR ],
            // The role(s) have permission to share audio
            [SHARE_AUDIO]       : [ userRoles.NORMAL ],
            // The role(s) have permission to share video
            [SHARE_VIDEO]       : [ userRoles.NORMAL ],
            // The role(s) have permission to share screen
            [SHARE_SCREEN]      : [ userRoles.NORMAL ],
            // The role(s) have permission to produce extra video
            [EXTRA_VIDEO]       : [ userRoles.NORMAL ],
            // The role(s) have permission to share files
            [SHARE_FILE]        : [ userRoles.NORMAL ],
            // The role(s) have permission to moderate files
            [MODERATE_FILES]    : [ userRoles.MODERATOR ],
            // The role(s) have permission to moderate room (e.g. kick user)
            [MODERATE_ROOM]     : [ userRoles.MODERATOR ],
            // The role(s) have permission to local record room
            [LOCAL_RECORD_ROOM] : [ userRoles.NORMAL ]
        },
        // Array of permissions. If no peer with the permission in question
        // is in the room, all peers are permitted to do the action. The peers
        // that are allowed because of this rule will not be able to do this 
        // action as soon as a peer with the permission joins. In this example
        // everyone will be able to lock/unlock room until a MODERATOR joins.
        allowWhenRoleMissing : [ CHANGE_ROOM_LOCK ]
     };
  config.json: |
    {
      "listeningPort" : "443",
      "listeningHost" : "0.0.0.0",

      "fileTracker" : "wss://tracker.openwebtorrent.com",

      "tls" : {
        "cert" : "/opt/edumeet/server/certs/tls.crt",
        "key"  : "/opt/edumeet/server/certs/tls.key"
      },

      "turnAPIKey" : "",
      "turnAPIURI" : "",

      "backupTurnServers" : [{
        "urls": [ "turn:gcp-europe-central2.stunner.cc:3478?transport=udp" ],
        "username" : "user-1",
        "credential" : "pass-1"
      }],

      "redisOptions": {
        "host" : "redis",
        "port" : "6379",
        "password" : ""
      },

      "prometheus" : {
          "enabled" : "true",
          "deidentify" : "true",
          "numeric" : "true",
          "listen" : "0.0.0.0"
      }

    }
---
# edumeet frontend
apiVersion: v1
kind: ConfigMap
metadata:
  name: edumeet-frontend
data:
  config.js: |
    /**
     * Edumeet App Configuration
     *
     * The configuration documentation is available also:
     * - in the app/README.md file in the source tree
     * - visiting the /?config=true page in a running instance
     */

    // eslint-disable-next-line
    var config = {

        // If the login is enabled.
        loginEnabled : false,

        // The development server listening port.
        developmentPort : 3443,

        // The production server listening port.
        productionPort : 443,

        // If the server component runs on a different host than the app you can specify the host name.
        serverHostname : '',

        // Supported browsers version in bowser satisfy format.
        supportedBrowsers : {
            'windows' : {
                'internet explorer' : '>12',
                'microsoft edge'    : '>18'
            },
            'microsoft edge'               : '>18',
            'safari'                       : '>12',
            'firefox'                      : '>=60',
            'chrome'                       : '>=74',
            'chromium'                     : '>=74',
            'opera'                        : '>=62',
            'samsung internet for android' : '>=11.1.1.52'
        },

        // Network priorities.
        networkPriorities : {
            'audio'            : 'high',
            'mainVideo'        : 'high',
            'additionalVideos' : 'medium',
            'screenShare'      : 'medium'
        },

        // The aspect ratio of the videos as shown on the screen.
        // This value must match exactly one of the values defined in aspectRatios.
        aspectRatio : 1.777,

        // The selectable aspect ratios in the user settings.
        aspectRatios : [
            {
                'value' : 1.333,
                'label' : '4 : 3'
            },
            {
                'value' : 1.777,
                'label' : '16 : 9'
            }
        ],

        // The default video camera capture resolution.
        resolution : 'medium',

        // The default video camera capture framerate.
        frameRate : 15,

        // The default screen sharing resolution.
        screenResolution : 'veryhigh',

        // The default screen sharing framerate.
        screenSharingFrameRate : 5,

        // Enable or disable simulcast for webcam video.
        simulcast : true,

        // Enable or disable simulcast for screen sharing video.
        simulcastSharing : false,

        // Define different encodings for various resolutions of the video.
        simulcastProfiles : {
            '320' : [
                {
                    'scaleResolutionDownBy' : 1,
                    'maxBitRate'            : 150000
                }
            ],
            '640' : [
                {
                    'scaleResolutionDownBy' : 2,
                    'maxBitRate'            : 150000
                },
                {
                    'scaleResolutionDownBy' : 1,
                    'maxBitRate'            : 500000
                }
            ],
            '1280' : [
                {
                    'scaleResolutionDownBy' : 4,
                    'maxBitRate'            : 150000
                },
                {
                    'scaleResolutionDownBy' : 2,
                    'maxBitRate'            : 500000
                },
                {
                    'scaleResolutionDownBy' : 1,
                    'maxBitRate'            : 1200000
                }
            ],
            '1920' : [
                {
                    'scaleResolutionDownBy' : 6,
                    'maxBitRate'            : 150000
                },
                {
                    'scaleResolutionDownBy' : 3,
                    'maxBitRate'            : 500000
                },
                {
                    'scaleResolutionDownBy' : 1,
                    'maxBitRate'            : 3500000
                }
            ],
            '3840' : [
                {
                    'scaleResolutionDownBy' : 12,
                    'maxBitRate'            : 150000
                },
                {
                    'scaleResolutionDownBy' : 6,
                    'maxBitRate'            : 500000
                },
                {
                    'scaleResolutionDownBy' : 1,
                    'maxBitRate'            : 10000000
                }
            ]
        },

        // The adaptive spatial layer selection scaling factor in the range [0.5, 1.0].
        adaptiveScalingFactor : 0.75,

        // If set to true Local Recording feature will be enabled.
        localRecordingEnabled : false,

        // White listing browsers that support audio output device selection.
        audioOutputSupportedBrowsers : [
            'chrome',
            'opera'
        ],

        // The Socket.io request timeout.
        requestTimeout : 20000,

        // The Socket.io request maximum retries.
        requestRetries : 3,

        // The Mediasoup transport options.
        transportOptions : {
            'tcp' : true
        },

        // Auto gain control enabled.
        autoGainControl : true,

        // Echo cancellation enabled.
        echoCancellation : true,

        // Noise suppression enabled.
        noiseSuppression : true,

        // Automatically unmute speaking above noiseThreshold.
        voiceActivatedUnmute : false,

        // This is only for voiceActivatedUnmute and audio-indicator.
        noiseThreshold : -60,

        // The audio sample rate.
        sampleRate : 48000,

        // The audio channels count.
        channelCount : 1,

        // The audio sample size count.
        sampleSize : 16,

        // If OPUS FEC stereo be enabled.
        opusStereo : false,

        // If OPUS DTX should be enabled.
        opusDtx : true,

        // If OPUS FEC should be enabled.
        opusFec : true,

        // The OPUS packet time.
        opusPtime : 20,

        // The OPUS playback rate.
        opusMaxPlaybackRate : 48000,

        // The audio preset
        audioPreset : 'conference',

        // The audio presets.
        audioPresets : {
            'conference' : {
                'name'                 : 'Conference audio',
                'autoGainControl'      : true,
                'echoCancellation'     : true,
                'noiseSuppression'     : true,
                'voiceActivatedUnmute' : false,
                'noiseThreshold'       : -60,
                'sampleRate'           : 48000,
                'channelCount'         : 1,
                'sampleSize'           : 16,
                'opusStereo'           : false,
                'opusDtx'              : true,
                'opusFec'              : true,
                'opusPtime'            : 20,
                'opusMaxPlaybackRate'  : 48000
            },
            'hifi' : {
                'name'                 : 'HiFi streaming',
                'autoGainControl'      : false,
                'echoCancellation'     : false,
                'noiseSuppression'     : false,
                'voiceActivatedUnmute' : false,
                'noiseThreshold'       : -60,
                'sampleRate'           : 48000,
                'channelCount'         : 2,
                'sampleSize'           : 16,
                'opusStereo'           : true,
                'opusDtx'              : false,
                'opusFec'              : true,
                'opusPtime'            : 60,
                'opusMaxPlaybackRate'  : 48000
            }
        },

        // It sets the maximum number of participants in one room that can join unmuted.
        // The next participant will join automatically muted.
        // Set it to 0 to auto mute all.
        // Set it to negative (-1) to never automatically auto mute but use it with caution, 
        // full mesh audio strongly decrease room capacity!
        autoMuteThreshold : 4,

        // The page background image URL
        background : 'images/background.jpg',

        // The default layout.
        defaultLayout : 'democratic',

        // If true, the media control buttons will be shown in separate control bar, not in the ME container.
        buttonControlBar : false,

        // If false, will push videos away to make room for side drawer.
        // If true, will overlay side drawer over videos.
        drawerOverlayed : true,

        // The position of the notifications.
        notificationPosition : 'right',

        // It sets the notifications sounds.
        // Valid keys are: 'parkedPeer', 'parkedPeers', 'raisedHand', 
        // 'chatMessage', 'sendFile', 'newPeer' and 'default'.
        // Not defining a key is equivalent to using the default notification sound.
        // Setting 'play' to null disables the sound notification.		
        // 
        notificationSounds : {
            'chatMessage' : {
                'play' : '/sounds/notify-chat.mp3'
            },
            'raisedHand' : {
                'play' : '/sounds/notify-hand.mp3'
            },
            'default' : {
                'delay' : 5000,
                'play'  : '/sounds/notify.mp3'
            }
        },

        // Timeout for auto hiding the topbar and the buttons control bar.
        hideTimeout : 3000,

        // The maximum number of participants that will be visible in as speaker.
        lastN : 4,

        // The maximum number of participants that will be visible in as speaker for mobile users.
        mobileLastN : 1,

        // The highest number of lastN the user can select manually in the user interface.
        maxLastN : 5,

        // If true, the users can not change the number of visible speakers.
        lockLastN : false,

        // If not null, it shows the logo loaded from the specified URL, otherwise it shows the title.
        logo : 'images/logo.edumeet.svg',

        // The title to show if the logo is not specified.
        title : 'edumeet',

        // The service & Support URL; if `null`, it will be not displayed on the about dialogs.
        supportUrl : 'https://support.example.com',

        // The privacy and data protection external URL or local HTML path.
        privacyUrl : 'privacy/privacy.html',

        // UI theme elements colors.
        theme : {
            'palette' : {
                'primary' : {
                    'main' : '#313131'
                }
            },
            'overrides' : {
                'MuiAppBar' : {
                    'colorPrimary' : {
                        'backgroundColor' : '#313131'
                    }
                },
                'MuiButton' : {
                    'containedPrimary' : {
                        'backgroundColor' : '#5F9B2D',
                        '&:hover'         : {
                            'backgroundColor' : '#5F9B2D'
                        }
                    },
                    'containedSecondary' : {
                        'backgroundColor' : '#f50057',
                        '&:hover'         : {
                            'backgroundColor' : '#f50057'
                        }
                    }
                },
                'MuiFab' : {
                    'primary' : {
                        'backgroundColor' : '#518029',
                        '&:hover'         : {
                            'backgroundColor' : '#518029'
                        },
                        '&:disabled' : {
                            'color'           : '#999898',
                            'backgroundColor' : '#323131'
                        }
                    },
                    'secondary' : {
                        'backgroundColor' : '#f50057',
                        '&:hover'         : {
                            'backgroundColor' : '#f50057'
                        },
                        '&:disabled' : {
                            'color'           : '#999898',
                            'backgroundColor' : '#323131'
                        }
                    }
                },
                'MuiBadge' : {
                    'colorPrimary' : {
                        'backgroundColor' : '#5F9B2D',
                        '&:hover'         : {
                            'backgroundColor' : '#518029'
                        }
                    }
                }
            },
            'typography' : {
                'useNextVariants' : true
            }
        }
    };

    // Generated with: `yarn gen-config-docs` from app/src/config.ts
---
apiVersion: v1
kind: Service
metadata:
  name: edumeet-server
  labels:
    app.kubernetes.io/name: edumeet-server
    app.kubernetes.io/instance: edumeet
    app.kubernetes.io/version: "3.5.3"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 443
      targetPort: 443
      protocol: TCP
      name: https
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: edumeet-server
    app.kubernetes.io/instance: edumeet
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: edumeet-server
  labels:
    app.kubernetes.io/name: edumeet-server
    app.kubernetes.io/instance: edumeet
    app.kubernetes.io/version: "3.5.3"
spec:
  replicas: 1
  serviceName: edumeet-server
  selector:
    matchLabels:
      app.kubernetes.io/name: edumeet-server
      app.kubernetes.io/instance: edumeet
  template:
    metadata:
      annotations:
        linkerd.io/inject: disabled
        sidecar.istio.io/inject: "false"
      labels:
        app.kubernetes.io/name: edumeet-server
        app.kubernetes.io/instance: edumeet
    spec:
      containers:
        - name: edumeet-server
          image: "edumeet/edumeet:3.5.3"
          imagePullPolicy: IfNotPresent
          #command: ["sh", "-c", "sleep 3600"]
          env:
            - name: BASEDIR
              value: /opt
            - name: EDUMEET
              value: edumeet
            - name: NODE_ENV
              value: production
            - name: SERVER_DEBUG
              value: ''
            - name: MEDIASOUP_LISTEN_IP
              value: 0.0.0.0
            - name: MEDIASOUP_ANNOUNCED_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          volumeMounts:
            - name: server-config
              mountPath: /opt/edumeet/server/dist/config
            - name: frontend-config
              mountPath: /opt/edumeet/server/dist/public/config
            - name: cert-volume
              mountPath: /opt/edumeet/server/certs
      volumes:
      - name: server-config
        configMap:
          name: edumeet-server
      - name: frontend-config
        configMap:
          name: edumeet-frontend
      - name: cert-volume
        secret:
          secretName: edumeet-tls
---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: edumeet-ingress
  namespace: edumeet
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
      - edumeet.gcp-europe-central2.stunner.cc
    secretName: edumeet-tls
  rules:
  - host: edumeet.gcp-europe-central2.stunner.cc
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: edumeet-server
            port:
              number: 443
---
